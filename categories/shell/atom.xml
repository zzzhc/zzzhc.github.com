<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | zzzhc's Blog]]></title>
  <link href="http://blog.zzzhc.com/categories/shell/atom.xml" rel="self"/>
  <link href="http://blog.zzzhc.com/"/>
  <updated>2011-12-16T17:20:48+08:00</updated>
  <id>http://blog.zzzhc.com/</id>
  <author>
    <name><![CDATA[zzzhc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ack - better grep]]></title>
    <link href="http://blog.zzzhc.com/posts/2011-12-16-ack-better-grep/"/>
    <updated>2011-12-16T16:40:00+08:00</updated>
    <id>http://blog.zzzhc.com/posts/ack-better-grep</id>
    <content type="html"><![CDATA[<p><a href="http://betterthangrep.com/">Ack</a>是一个给程序员用的grep, 使用perl regular expressions, 而不是POSIX/GNU subset.</p>

<h2>why ack?</h2>

<ul>
<li>使用perl regular expressions, 忘掉grep那套不人性的pattern吧</li>
<li>速度快, 默认只搜索程序代码文件</li>
<li>自动忽略.svn, .git, CVS这类目录, 默认递归搜索子目录</li>
</ul>


<p>``` bash</p>

<h1>with grep</h1>

<p>$ grep pattern $(find . -type f | grep -v '.svn')
or
$ grep -R --exclude-dir .svn pattern</p>

<h1>with ack</h1>

<p>$ ack pattern
```</p>

<ul>
<li>支持搜索指定文件类型</li>
</ul>


<p>``` bash</p>

<h1>只搜索ruby code</h1>

<p>$ ack --ruby pattern
```</p>

<h2>install</h2>

<p>``` bash</p>

<h1>mac</h1>

<p>$ brew install ack</p>

<h1>ubuntu</h1>

<p>$ sudo apt-get install ack-grep
```</p>

<h2>integrate into vim</h2>

<ul>
<li>install <a href="https://github.com/mileszs/ack.vim">ack.vim</a></li>
<li>set grepprg=ack in vimrc</li>
</ul>


<h2>custom ack</h2>

<p>Ack默认包含很多filetype => extensions的设置，但新出现的语言不一定支持。好在ack提供<code>--type-add TYPE=.EXTENSION[,.EXT2[,...]]</code>, <code>--type-set TYPE=.EXTENSION[,.EXT2[,...]]</code>来扩展。经常用的可以加到~/.ackrc里, 我的.ackrc:</p>

<p><code>bash
$ cat ~/.ackrc
--type-add
ruby=.haml,.ru
--type-add
css=.scss,.sass,.less
--type-add
js=.coffee
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab tips]]></title>
    <link href="http://blog.zzzhc.com/posts/2011-12-10-crontab-tips/"/>
    <updated>2011-12-10T12:02:00+08:00</updated>
    <id>http://blog.zzzhc.com/posts/crontab-tips</id>
    <content type="html"><![CDATA[<h2>crontab command</h2>

<p>``` bash</p>

<h1>设置编辑器</h1>

<p>$ export EDITOR=vim</p>

<h1>编辑</h1>

<p>$ crontab -e [-u user]</p>

<h1>列出crontab内容</h1>

<p>$ crontab -l [-u user]</p>

<h1>删除crontab文件</h1>

<p>$ crontab -r [-u user]
```</p>

<h2>crontab syntax</h2>

<p>```
* * * * *  command
| | | | |
| | | | |- day of week(0-6) 0 means sunday
| | | |--- month(1-12)
| | |----- day of month(1-31)
| |------- hour
|--------- minute(0-59)</p>

<ul>
<li>表示的项可以用,分隔指定多个值(如5,15,25)，也可以指定周期，如在minute项上写*/5表示每5分钟执行一次
```</li>
</ul>


<h2>crontab environment</h2>

<p>cron脚本执行的环境跟正常用户执行的有区别，~/.bashrc不会被执行, 这一点经常会引起问题, 可以在crontab里设置环境变量来减少影响.</p>

<p>``` bash</p>

<h1>PATH, SHELL, MAILTO比较常用, 如</h1>

<p>PATH=/usr/bin:/usr/sbin:/bin:/sbin
SHELL=/bin/bash
MAILTO=xxx@xxx.com</p>

<p>1 * * * * find /var/data/upload/ -mtime 30 -exec rm -- {} +
```</p>

<p>默认情况crontab按OS时区调度, 而不是用户时区，可以通过指定TZ环境变量设实际要用的时区</p>

<p><code>bash
TZ=UTC
1 * * * * find /var/data/upload/ -mtime 30 -exec rm -- {} +
</code></p>

<h1>crontab notification</h1>

<p>如果command有输出(stdout/stderr)，crond会发送通知邮件, 具体发送给谁可以通过MAILTO定义，默认发送给当前用户。
一般情况stdout可以忽略，所以经常会看到crontab里有 command >/dev/null; stderr一定不要忽略，否则cron job有错误无法正常执行都不知道。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash tips - 0]]></title>
    <link href="http://blog.zzzhc.com/posts/2011-12-09-bash-tips-0/"/>
    <updated>2011-12-09T20:18:00+08:00</updated>
    <id>http://blog.zzzhc.com/posts/bash-tips-0</id>
    <content type="html"><![CDATA[<ul>
<li>为变量设置缺省值</li>
</ul>


<p><code>bash
: ${BIND_PORT:=9999}
</code></p>

<ul>
<li>取得前一个在后台运行的进程pid</li>
</ul>


<p><code>bash
$ sleep 10 &amp;
$ echo $!
</code></p>

<ul>
<li>当前脚本的绝对路径</li>
</ul>


<p><code>bash
SCRIPT_PATH=`readlink -f "$0"`
</code></p>
]]></content>
  </entry>
  
</feed>
