---
layout: post
title: 'ruby eventmachine'
date: 2011-4-2
wordpress_id: 25
permalink: /blogs/25
comments: true
---
[eventmachine](https://github.com/eventmachine/eventmachine) 是一个快速轻量的网络协议框架，有不少ruby应用基于它实现，如thin, ruby-amqp. eventmachine在不同os上自动选择最佳的底层网络通知机制，在linux上用epoll，freebsd上用kqueue.

eventmachine对网络事件进行封装，有事件发生时回调预设的handler module。

事件处理都需要放在EventMachine::run里，可以分server, client两种模式

{% codeblock %}
#server
EventMachine::run {
  EventMachine::start_server &quot;0.0.0.0&quot;, port, ServerHandler
}
#client
EventMachine::run {
  EventMachine::connect remote_server, port, ClientHandler #client
}
{% endcodeblock %}

在一个网络连接的生存周期中，可能发生的回调事件有：
<ol>
	<li>post_init　handler对象创建后，注意client模式时，即使连接还未建立也会被调用</li>
	<li>connection_completed　主动连接远端服务器，连接建立时</li>
	<li>receive_data　有数据可读时, 在这里需要处理协议细节</li>
	<li>unbind　连接关闭，主动关闭，对方关闭或网络错误</li>
</ol>
在handler上可以使用send_data发送数据.

最简单的echo server

{% codeblock %}
#!/usr/bin/env ruby

require 'rubygems'
require 'eventmachine'

module EchoServer
  def post_init
    puts &quot;-- someone connected to the echo server!&quot;
  end

  def receive_data data
    send_data &quot;&gt;&gt;&gt;you sent: #{data}&quot;
    close_connection if data =~ /quit/i
  end

  def unbind
    puts &quot;-- someone disconnected from the echo server!&quot;
  end
end

EventMachine::run {
  EventMachine::start_server &quot;127.0.0.1&quot;, 8081, EchoServer
}
{% endcodeblock %}

一个简单的http client

{% codeblock %}
#!/usr/bin/env ruby

require 'rubygems'
require 'eventmachine'

module HttpClient
  def post_init
    puts &quot;sending request to server&quot;
    send_data &quot;GET / HTTP/1.1\r\nHost: www.baidu.com\r\nConnection: close\r\n\r\n&quot;
  end

  def receive_data data
    puts &quot;recv: #{data}&quot;
  end

  def unbind
    puts &quot;connection closed&quot;
    EventMachine::stop
  end
end

EventMachine::run {
  EventMachine::connect &quot;www.baidu.com&quot;, 80, HttpClient
}
{% endcodeblock %}

连接失败的例子:

{% codeblock %}
#!/usr/bin/env ruby

require 'rubygems'
require 'eventmachine'

module Client
  def connection_completed
    puts &quot;connected&quot;
  end

  def post_init
    puts &quot;handler inited&quot;
  end

  def receive_data data
    puts &quot;recv: #{data}&quot;
  end

  def unbind
    puts &quot;connection closed&quot;
    EventMachine::stop
  end
end

EventMachine::run {
  EventMachine::connect &quot;api.jquery.com&quot;, 8088, Client
}
{% endcodeblock %}
